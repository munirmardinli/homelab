{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"","title":"Home","text":"<p>This repository contains a Docker Compose environment for a private homelab focused on security, automation, authentication, and developer productivity.</p>","tags":["Global"]},{"location":"#included-services","title":"\ud83d\udce6 Included Services","text":"\ud83d\udd10 Authentication\ud83d\udee0 System Services\ud83d\udcbb Development\u2601\ufe0f Cloud &amp; Proxy <p>Autentik: OpenID Connect provider for SSO across all services</p> <ul> <li>Watchtower: Automatic container updates</li> <li>Autoheal: Restarts faulty containers</li> <li>Dashy: Homepage with links and status overview</li> <li>Roundcube: Webmail client</li> <li>Guacamole: Remote desktop gateway (RDP, SSH, etc.)</li> </ul> <ul> <li>Code-Server: Web-based VS Code</li> <li>Obsidian Server: Central knowledge base</li> <li>GitLab &amp; GitLab-Runner: Private CI/CD platform</li> </ul> <ul> <li>Nextcloud: File hosting</li> <li>Pi-hole: Network-wide ad blocker</li> <li>Cloudflared: Secure tunnels</li> <li>Nginx Proxy Manager: SSL and reverse proxy</li> </ul>","tags":["Global"]},{"location":"#setup","title":"\ud83d\ude80 Setup","text":"PrerequisitesStartingConfiguration <ul> <li>Docker &amp; Docker Compose</li> <li>Configured <code>.env</code> file</li> <li>Valid domain and DNS setup (Cloudflare recommended)</li> </ul> <pre><code>cd docker\ndocker-compose -f &lt;filename&gt;.yml up -d\n</code></pre> <ul> <li>All environment variables are defined in the <code>.env</code> file</li> <li>Secrets like passwords, certificates, and API keys belong in the <code>secrets/</code> folder</li> <li>Never commit secrets to the Git repository!</li> <li>HTTPS is managed via Nginx Proxy Manager \u2014 ideally combined with Cloudflare as DNS provider</li> </ul>","tags":["Global"]},{"location":"#services-overview","title":"\ud83c\udf0d Services Overview","text":"Service Example URL Auth via Autentik Dashy <code>https://dashy.deinedomain.tld</code> \u2705 GitLab <code>https://git.deinedomain.tld</code> \u2705 Nextcloud <code>https://cloud.deinedomain.tld</code> \u2705 Guacamole <code>https://remote.deinedomain.tld</code> \u2705 Roundcube <code>https://mail.deinedomain.tld</code> \u2705","tags":["Global"]},{"location":"blog/","title":"\ud83d\udcdd Alle Blogartikel","text":""},{"location":"blog/posts/authentik/","title":"Authentik Identity Provider","text":"<p>Production-ready identity and access management solution with SSO, user directories, and multi-factor authentication.</p>","tags":["Authentication","SSO"]},{"location":"blog/posts/authentik/#service-configuration","title":"\ud83d\udee0\ufe0f Service Configuration","text":"<ul> <li>This setup uses the shared Docker Compose anchors for:</li> <li>Logging (<code>default-logging</code>)</li> <li>Labels (<code>default-labels</code>)</li> <li>Resource limits (<code>resource-limits</code>)</li> </ul>","tags":["Authentication","SSO"]},{"location":"blog/posts/authentik/#core-services","title":"Core Services","text":"PostgreSQLRedisAuthentik ServerAuthentik Worker <pre><code>postgresql:\n  container_name: authentik-postgresql\n  hostname: authentik-postgresql\n  image: docker.io/library/postgres:16-alpine\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=authentik-postgresql\n  healthcheck:\n    test: [\"CMD-SHELL\", \"pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}\"]\n    start_period: 20s\n    interval: 30s\n    retries: 5\n    timeout: 5s\n  volumes:\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT:?path required}/authentik/database\n      target: /var/lib/postgresql/data\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  environment:\n    POSTGRES_PASSWORD: ${PG_PASS:?database password required} # (1)\n    POSTGRES_USER: ${PG_USER:-authentik} # (2)\n    POSTGRES_DB: ${PG_DB:-authentik} # (3)\n    UID: ${UID_NAS_ADMIN:-1026} # optional (4)\n    GID: ${GID_NAS_ADMIN:-100} # optional (5)\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: authentik-postgresql\n</code></pre> <ol> <li>POSTGRES_PASSWORD    \u2192 Required database password (must be set in <code>.env</code>)</li> <li>POSTGRES_USER    \u2192 Database username (default: <code>authentik</code>)</li> <li>POSTGRES_DB    \u2192 Database name (default: <code>authentik</code>)</li> <li>UID    \u2192 Optional user ID for volume permissions (default: 1026)</li> <li>GID    \u2192 Optional group ID for volume permissions (default: 100)</li> </ol> <pre><code>redis:\n  container_name: authentik-redis\n  hostname: authentik-redis\n  image: docker.io/library/redis:alpine\n  command: --save 60 1 --loglevel warning\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=authentik-redis\n  healthcheck:\n    test: [\"CMD-SHELL\", \"redis-cli ping | grep PONG\"]\n    start_period: 20s\n    interval: 30s\n    retries: 5\n    timeout: 3s\n  volumes:\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/authentik/redis\n      target: /data\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # optional (1)\n    GID: ${GID_NAS_ADMIN:-100} # optional (2)\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: authentik-redis\n</code></pre> <ol> <li>\u2192 Optional user ID for volume permissions (default: 1026)</li> <li>\u2192 Optional group ID for volume permissions (default: 100)</li> </ol> <pre><code>authentik:\n  container_name: authentik\n  hostname: authentik\n  image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.1}\n  restart: always\n  command: server\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=authentik\n  environment:\n    AUTHENTIK_REDIS__HOST: redis # (1)\n    AUTHENTIK_POSTGRESQL__HOST: postgresql # (2)\n    AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik} # (3)\n    AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik} # (4)\n    AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS} # (5)\n    AUTHENTIK_BOOTSTRAP_EMAIL: ${EMAIL} # (6)\n    AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD} # (7)\n    AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY} # (8)\n    UID: ${UID_NAS_ADMIN:-1026} # optional (9)\n    GID: ${GID_NAS_ADMIN:-100} # optional (10)\n  volumes:\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/authentik/media\n      target: /media\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/authentik/templates\n      target: /templates\n  ports:\n    - \"${COMPOSE_PORT_HTTP:-9001}:9000\"\n    - \"${COMPOSE_PORT_HTTPS:-9443}:9443\"\n  depends_on:\n    postgresql:\n      condition: service_healthy\n    redis:\n      condition: service_healthy\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: authentik\n</code></pre> <ol> <li>\u2192 Redis hostname (using Docker service name)</li> <li>\u2192 PostgreSQL hostname (using Docker service name)</li> <li>\u2192 PostgreSQL username (matches <code>POSTGRES_USER</code>)</li> <li>\u2192 Database name (matches <code>POSTGRES_DB</code>)</li> <li>\u2192 Must match <code>POSTGRES_PASSWORD</code></li> <li>\u2192 Initial admin email (must be set in <code>.env</code>)</li> <li>\u2192 Initial admin password (must be set in <code>.env</code>)</li> <li>\u2192 Encryption key (must be set in <code>.env</code>)</li> <li>\u2192 User ID for volume permissions (default: 1026)</li> <li>\u2192 Group ID for volume permissions (default: 100)</li> </ol> <pre><code>worker:\n  container_name: authentik-worker\n  hostname: authentik-worker\n  image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.1}\n  restart: always\n  command: worker\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=authentik-worker\n  environment:\n    AUTHENTIK_REDIS__HOST: redis # (1)\n    AUTHENTIK_POSTGRESQL__HOST: postgresql # (2)\n    AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik} # (3)\n    AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik} # (4)\n    AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS} # (5)\n    AUTHENTIK_BOOTSTRAP_EMAIL: ${EMAIL} # (6)\n    AUTHENTIK_BOOTSTRAP_PASSWORD: ${AUTHENTIK_BOOTSTRAP_PASSWORD} # (7)\n    AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY} # (8)\n    UID: ${UID_NAS_ADMIN:-1026} # optional (9)\n    GID: ${GID_NAS_ADMIN:-100} # optional (10)\n  user: root\n  volumes:\n    - type: bind\n      source: /var/run/docker.sock\n      target: /var/run/docker.sock\n      read_only: true\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/authentik/media\n      target: /media\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/authentik/certs\n      target: /certs\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/authentik/templates\n      target: /templates\n  depends_on:\n    postgresql:\n      condition: service_healthy\n    redis:\n      condition: service_healthy\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: authentik\n</code></pre> <ol> <li>\u2192 Redis hostname (using Docker service name)</li> <li>\u2192 PostgreSQL hostname (using Docker service name)</li> <li>\u2192 PostgreSQL username (matches <code>POSTGRES_USER</code>)</li> <li>\u2192 Database name (matches <code>POSTGRES_DB</code>)</li> <li>\u2192 Must match <code>POSTGRES_PASSWORD</code></li> <li>\u2192 Initial admin email (must be set in <code>.env</code>)</li> <li>\u2192 Initial admin password (must be set in <code>.env</code>)</li> <li>\u2192 Encryption key (must be set in <code>.env</code>)</li> <li>\u2192 User ID for volume permissions (default: 1026)</li> <li>\u2192 Group ID for volume permissions (default: 100)</li> </ol>","tags":["Authentication","SSO"]},{"location":"blog/posts/authentik/#required-environment-variables","title":"\ud83d\udd10 Required Environment Variables","text":"<p>Refer to Environment Variables documentation for:</p> Variable Description Required <code>PG_PASS</code> PostgreSQL password \u2705 <code>AUTHENTIK_BOOTSTRAP_PASSWORD</code> Initial admin password \u2705 <code>AUTHENTIK_SECRET_KEY</code> Encryption key \u2705 <code>MOUNT_PATH_DOCKER_ROOT</code> Storage path \u2705 <code>UID_NAS_ADMIN</code> User ID for volume permissions \u26a0\ufe0f Recommended <code>GID_NAS_ADMIN</code> Group ID for volume permissions \u26a0\ufe0f Recommended <p>Security Notice</p> <ul> <li>Be stored in <code>.env</code> files</li> <li>Have restricted permissions (<code>chmod 600</code>)</li> <li>Never be committed to version control</li> <li>Be rotated periodically</li> </ul>","tags":["Authentication","SSO"]},{"location":"blog/posts/authentik/#deployment","title":"\ud83d\ude80 Deployment","text":"<ol> <li>Create <code>.env</code> file with required variables</li> <li>Initialize volumes <pre><code>mkdir -p ${MOUNT_PATH_DOCKER_ROOT}/authentik/{database,redis,media,certs,templates}\nchown -R ${UID_NAS_ADMIN:-1026}:${GID_NAS_ADMIN:-100} ${MOUNT_PATH_DOCKER_ROOT}/authentik\n</code></pre></li> <li>Start services <pre><code>docker-compose up -d\n</code></pre></li> <li>Access web UI at <code>https://yourdomain.com:9443</code></li> </ol>","tags":["Authentication","SSO"]},{"location":"blog/posts/authentik/#maintenance","title":"\ud83d\udd04 Maintenance","text":"<ul> <li>Backups<ul> <li>Regularly backup the PostgreSQL volume</li> </ul> </li> <li>Updates <pre><code>docker-compose pull\ndocker-compose up -d\n</code></pre></li> <li>Logs <pre><code>docker-compose logs -f\n</code></pre></li> </ul>","tags":["Authentication","SSO"]},{"location":"blog/posts/containerManagement/","title":"Container Management Tools","text":"<p>Production-grade container monitoring, auto-healing and dashboard solutions.</p>","tags":["Monitoring","Maintenance"]},{"location":"blog/posts/containerManagement/#service-configuration","title":"\ud83d\udee0\ufe0f Service Configuration","text":"<ul> <li>Logging (<code>default-logging</code>)</li> <li>Labels (<code>default-labels</code>)</li> <li>Resource limits (<code>resource-limits</code>)</li> </ul>","tags":["Monitoring","Maintenance"]},{"location":"blog/posts/containerManagement/#core-services","title":"Core Services","text":"WatchtowerAutohealDashyRoundcubeGuacamole <pre><code>watchtower:\n  image: containrrr/watchtower\n  container_name: watchtower\n  hostname: watchtower\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=watchtower\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n    WATCHTOWER_CLEANUP: true # (3)\n    WATCHTOWER_LABEL_ENABLE: true # (4)\n    WATCHTOWER_DEBUG: true # (5)\n    WATCHTOWER_ROLLING_RESTART: true # (6)\n    WATCHTOWER_INCLUDE_STOPPED: true # (7)\n    NO_COLOR: 1 # (8)\n    WATCHTOWER_NO_SETUP_MESSAGE: true # (9)\n    WATCHTOWER_TIMEOUT: 30s # (10)\n    WATCHTOWER_NO_RESTART: false # (11)\n    WATCHTOWER_POLL_INTERVAL: 30 # (12)\n    WATCHTOWER_HTTP_API_UPDATE: true # (13)\n    WATCHTOWER_HTTP_API_METRICS: true # (14)\n    WATCHTOWER_HTTP_API_PERIODIC_POLLS: true # (15)\n    DOCKER_TLS_VERIFY: true # (16)\n    WATCHTOWER_LOG_LEVEL: info # (17)\n    DOCKER_API_VERSION: 1.41 # (18)\n    WATCHTOWER_REMOVE_VOLUMES: false # (19)\n    WATCHTOWER_TRACE: true # (20)\n    WATCHTOWER_HTTP_API_TOKEN: ${WATCHTOWER_HTTP_API_TOKEN:? Token is missing} # (21)\n    WATCHTOWER_NOTIFICATIONS: gotify # (22)\n    WATCHTOWER_NOTIFICATIONS_LEVEL: info # (23)\n    WATCHTOWER_NOTIFICATION_GOTIFY_URL: https://gotify.${SYNOLOGY_BASIC_URL} # (24)\n    WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN: ${WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN:?Token is Required} # (25)\n  ports:\n    - \"8080:8080\"\n  volumes:\n    - type: bind\n      source: /var/run/docker.sock\n      target: /var/run/docker.sock\n      read_only: true\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n    - type: bind\n      source: /root/.docker/config.json\n      target: /root/.docker/config.json\n      read_only: true\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: watchtower\n</code></pre> <ol> <li>\u2192 User ID for permissions (default: 1026)</li> <li>\u2192 Group ID for permissions (default: 100)</li> <li>\u2192 Automatically clean up old images</li> <li>\u2192 Enable container monitoring by label</li> <li>\u2192 Enable debug mode</li> <li>\u2192 Enable rolling restarts</li> <li>\u2192 Monitor stopped containers</li> <li>\u2192 Disable colored output</li> <li>\u2192 Disable setup message</li> <li>\u2192 Container stop timeout (30s)</li> <li>\u2192 Disable container restarts (false)</li> <li>\u2192 Check interval in seconds (30)</li> <li>\u2192 Enable HTTP API updates</li> <li>\u2192 Enable metrics endpoint</li> <li>\u2192 Enable periodic polls via API</li> <li>\u2192 Enable TLS verification</li> <li>\u2192 Log level (info)</li> <li>\u2192 Docker API version (1.41)</li> <li>\u2192 Remove volumes with containers (false)</li> <li>\u2192 Enable trace logging</li> <li>\u2192 Required API token</li> <li>\u2192 Notification service (gotify)</li> <li>\u2192 Notification level (info)</li> <li>\u2192 Gotify server URL</li> <li>\u2192 Gotify access token</li> </ol> <pre><code>autoheal:\n  image: willfarrell/autoheal\n  container_name: autoheal\n  hostname: autoheal\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=autoheal\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n    AUTOHEAL_INTERVAL: 60s # (3)\n    AUTOHEAL_CONTAINER_LABEL: recreat.container # (4)\n    DOCKER_HOST: unix:///var/run/docker.sock # (5)\n    WEBHOOK_URL: https://gotify.${SYNOLOGY_BASIC_URL}/message?token=${WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN} # (6)\n    AUTOHEAL_ONLY_MONITOR_RUNNING: false # (7)\n  volumes:\n    - type: bind\n      source: /var/run/docker.sock\n      target: /var/run/docker.sock\n      read_only: true\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: autoheal\n</code></pre> <ol> <li>\u2192 User ID for permissions (default: 1026)</li> <li>\u2192 Group ID for permissions (default: 100)</li> <li>\u2192 Health check interval (60s)</li> <li>\u2192 Label to identify containers to monitor</li> <li>\u2192 Docker socket path</li> <li>\u2192 Gotify webhook URL for notifications</li> <li>\u2192 Monitor only running containers (false)</li> </ol> <pre><code>dashy:\n  container_name: dashy\n  hostname: dashy\n  image: lissy93/dashy:latest\n  restart: always\n  cap_drop:\n    - ALL\n  cap_add:\n    - CHOWN\n    - SETGID\n    - SETUID\n    - DAC_OVERRIDE\n    - NET_BIND_SERVICE\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=dashy\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n  ports:\n    - \"${DASHY_PORT:-90}:8080\"\n  volumes:\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/development/config/dashy.yml\n      target: /app/user-data/conf.yml\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  networks:\n    - dockerization\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: dashy\n</code></pre> <ol> <li>\u2192 User ID for permissions (default: 1026)</li> <li>\u2192 Group ID for permissions (default: 100)</li> </ol> <pre><code>roundcube:\n  image: roundcube/roundcubemail:latest\n  container_name: roundcube\n  hostname: roundcube\n  restart: always\n  ports:\n    - \"${ROUNDCUBE_PORT:-9002}:8080\"\n  volumes:\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/www:/var/www/html\n      target: /var/roundcube/db\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/config\n      target: /var/roundcube/config\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/db\n      target: /var/www/html\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: roundcube\n</code></pre> <pre><code>guacamole:\n  image: ${image_guacamole:-jwetzell/guacamole}\n  container_name: guacamole\n  hostname: guacamole\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=guacamole\n  ports:\n    - \"${GUACMOLE_PORT:-8348}:8080\"\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n    GUACD_LOG_LEVEL: info # (3)\n    GUACD_PORT: 80 # (4)\n  volumes:\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/guacamole\n      target: /config\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/logs/guacamole\n      target: /var/log/\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: guacamole\n</code></pre> <ol> <li>\u2192 User ID for permissions (default: 1026)</li> <li>\u2192 Group ID for permissions (default: 100)</li> <li>\u2192 Log level (info)</li> <li>\u2192 Guacamole daemon port (80)</li> </ol>","tags":["Monitoring","Maintenance"]},{"location":"blog/posts/containerManagement/#required-environment-variables","title":"\ud83d\udd10 Required Environment Variables","text":"Variable Description Required <code>UID_NAS_ADMIN</code> User ID for volume permissions \u26a0\ufe0f Recommended <code>GID_NAS_ADMIN</code> Group ID for volume permissions \u26a0\ufe0f Recommended <code>WATCHTOWER_HTTP_API_TOKEN</code> Watchtower API token \u2705 <code>WATCHTOWER_NOTIFICATION_GOTIFY_TOKEN</code> Gotify notification token \u2705 <code>MOUNT_PATH_DOCKER_ROOT</code> Base storage path \u2705 <code>SYNOLOGY_BASIC_URL</code> Base domain for services \u2705 <code>DASHY_PORT</code> Dashy web interface port \u26a0\ufe0f Recommended <code>ROUNDCUBE_PORT</code> Roundcube web interface port \u26a0\ufe0f Recommended <code>GUACMOLE_PORT</code> Guacamole web interface port \u26a0\ufe0f Recommended <code>image_guacamole</code> Guacamole image override \u26a0\ufe0f Optional <p>Security Notice</p> <ul> <li>Be stored in <code>.env</code> files</li> <li>Have restricted permissions (<code>chmod 600</code>)</li> <li>Never be committed to version control</li> <li>Be rotated periodically</li> </ul>","tags":["Monitoring","Maintenance"]},{"location":"blog/posts/containerManagement/#deployment","title":"\ud83d\ude80 Deployment","text":"<ol> <li>Create <code>.env</code> file with required variables</li> <li>Initialize volumes <pre><code>mkdir -p ${MOUNT_PATH_DOCKER_ROOT}/{guacamole,logs/guacamole,development/config,www,config,db}\nchown -R ${UID_NAS_ADMIN:-1026}:${GID_NAS_ADMIN:-100} ${MOUNT_PATH_DOCKER_ROOT}\n</code></pre></li> <li>Start services <pre><code>docker-compose up -d\n</code></pre></li> </ol>","tags":["Monitoring","Maintenance"]},{"location":"blog/posts/containerManagement/#maintenance","title":"\ud83d\udd04 Maintenance","text":"<ul> <li>Updates <pre><code>docker-compose pull &amp;&amp; docker-compose up -d\n</code></pre></li> <li>Logs <pre><code>docker-compose logs -f\n</code></pre></li> </ul>","tags":["Monitoring","Maintenance"]},{"location":"blog/posts/coreServices/","title":"Core Infrastructure Services","text":"<p>Essential networking stack including DNS resolution, reverse proxy, and cloud tunneling.</p>","tags":["Networking","DNS","Proxy"]},{"location":"blog/posts/coreServices/#service-configuration","title":"\ud83d\udee0\ufe0f Service Configuration","text":"<ul> <li>This setup uses the shared Docker Compose anchors for:</li> <li>Logging (<code>default-logging</code>)</li> <li>Labels (<code>default-labels</code>)</li> <li>Resource limits (<code>resource-limits</code>)</li> </ul>","tags":["Networking","DNS","Proxy"]},{"location":"blog/posts/coreServices/#core-services","title":"Core Services","text":"Cloudflare TunnelPi-hole DNSNginx Proxy Manager <pre><code>cloudflared:\n  container_name: cloudflared\n  hostname: cloudflared\n  image: cloudflare/cloudflared:latest\n  command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TOKEN:?CLOUDFLARE_TOKEN required}\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=cloudflared\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n    TUNNEL_METRICS: ${TUNNEL_METRICS:-0.0.0.0:8080} # (3)\n  volumes:\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: cloudflared\n</code></pre> <ol> <li>\u2192 User ID for volume permissions (default: 1026)</li> <li>\u2192 Group ID for volume permissions (default: 100)</li> <li>\u2192 Metrics endpoint (default: 0.0.0.0:8080)</li> </ol> <pre><code>pihole:\n  container_name: pihole\n  hostname: pihole\n  image: pihole/pihole\n  restart: always\n  cap_add:\n    - NET_ADMIN\n  security_opt:\n    - no-new-privileges=false\n  deploy:\n    resources:\n      limits:\n        memory: 512MB\n  ulimits:\n    nofile:\n      soft: 65536\n      hard: 65536\n  healthcheck:\n    test: [\"CMD\", \"dig\", \"@127.0.0.1\", \"-p53\", \"pi.hole\"]\n    interval: 1m\n    timeout: 10s\n    retries: 3\n    start_period: 30s\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=pihole\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n    FTLCONF_LOCAL_IPV4: ${FTLCONF_LOCAL_IPV4:-0.0.0.0} # (3)\n    FTLCONF_LOCAL_IPV6: ${FTLCONF_LOCAL_IPV6:-::} # (4)\n    PIHOLE_UID: ${PIHOLE_UID:-1000} # (5)\n    PIHOLE_GID: ${PIHOLE_GID:-1000} # (6)\n    DNSMASQ_USER: ${DNSMASQ_USER:-pihole} # (7)\n    FTLCONF_dns_listeningMode: ${FTLCONF_dns_listeningMode:-all} # (8)\n    FTLCONF_webserver_port: ${FTLCONF_webserver_port:-80} # (9)\n    FTLCONF_webserver_api_password: ${PI_HOLE_PASSWORD:?Password is Missing} # (10)\n    WEBTHEME: ${WEBTHEME:-dark} # (11)\n    FTLCONF_dns_upstreams: ${FTLCONF_dns_upstreams:-1.1.1.1;1.0.0.1;8.8.8.8;8.8.4.4} # (12)\n    FTLCONF_QUERY_LOGGING: ${FTLCONF_QUERY_LOGGING:-true} # (13)\n    FTLCONF_MAXDBDAYS: ${FTLCONF_MAXDBDAYS:-30} # (14)\n    FTLCONF_PRIVACYLEVEL: ${FTLCONF_PRIVACYLEVEL:-0} # (15)\n    VIRTUAL_HOST: pihole.${SYNOLOGY_BASIC_URL} # (16)\n  ports:\n    - \"53:53/tcp\"\n    - \"53:53/udp\"\n    - \"81:80/tcp\"\n  volumes:\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT:?path required}/config/dnsmasq.d\n      target: /etc/dnsmasq.d\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/pihole\n      target: /etc/pihole\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/logs/pihole\n      target: /var/log/pihole\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: pihole\n</code></pre> <ol> <li>\u2192 User ID for permissions (default: 1026)</li> <li>\u2192 Group ID for permissions (default: 100)</li> <li>\u2192 IPv4 listening address (default: 0.0.0.0)</li> <li>\u2192 IPv6 listening address (default: ::)</li> <li>\u2192 Pi-hole user ID (default: 1000)</li> <li>\u2192 Pi-hole group ID (default: 1000)</li> <li>\u2192 DNSMasq user (default: pihole)</li> <li>\u2192 DNS listening mode (default: all)</li> <li>\u2192 Web interface port (default: 80)</li> <li>\u2192 Required admin password</li> <li>\u2192 Web UI theme (default: dark)</li> <li>\u2192 Upstream DNS servers</li> <li>\u2192 Query logging (default: true)</li> <li>\u2192 Log retention (default: 30 days)</li> <li>\u2192 Privacy level (default: 0)</li> <li>\u2192 Virtual host URL</li> </ol> <pre><code>npm-proxy:\n  container_name: npm-proxy\n  hostname: npm-proxy\n  image: jc21/nginx-proxy-manager:latest\n  restart: always\n  healthcheck:\n    test:\n      - CMD\n      - curl\n      - -f\n      - http://localhost:81/ping\n    interval: 30s\n    timeout: 10s\n    retries: 3\n    start_period: 20s\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=npm-proxy\n  ports:\n    - ${NGNIX_PROXY_MANAGER_PORT:-84}:81\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n    INITIAL_ADMIN_EMAIL: ${EMAIL} # (3)\n    INITIAL_ADMIN_PASSWORD: ${INITIAL_ADMIN_PASSWORD:?Password is missing} # (4)\n  volumes:\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/ngx/data\n      target: /data\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/development/config/ngx.json\n      target: /app/config/production.json\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/ngx/letsencrypt\n      target: /etc/letsencrypt\n    - type: bind\n      source: /var/run/docker.sock\n      target: /var/run/docker.sock\n      read_only: true\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: npm-proxy\n</code></pre> <ol> <li>\u2192 User ID for permissions (default: 1026)</li> <li>\u2192 Group ID for permissions (default: 100)</li> <li>\u2192 Admin email address</li> <li>\u2192 Required admin password</li> </ol>","tags":["Networking","DNS","Proxy"]},{"location":"blog/posts/coreServices/#required-environment-variables","title":"\ud83d\udd10 Required Environment Variables","text":"<p>Refer to Environment Variables documentation for:</p> Variable Description Required <code>CLOUDFLARE_TOKEN</code> Cloudflare Tunnel token \u2705 <code>PI_HOLE_PASSWORD</code> Pi-hole admin password \u2705 <code>INITIAL_ADMIN_PASSWORD</code> NPM admin password \u2705 <code>MOUNT_PATH_DOCKER_ROOT</code> Storage path \u2705 <code>SYNOLOGY_BASIC_URL</code> Base domain for services \u2705 <code>UID_NAS_ADMIN</code> User ID for volume permissions \u26a0\ufe0f Recommended <code>GID_NAS_ADMIN</code> Group ID for volume permissions \u26a0\ufe0f Recommended <p>Security Notice</p> <ul> <li>Be stored in <code>.env</code> files</li> <li>Have restricted permissions (<code>chmod 600</code>)</li> <li>Never be committed to version control</li> <li>Be rotated periodically</li> </ul>","tags":["Networking","DNS","Proxy"]},{"location":"blog/posts/coreServices/#deployment","title":"\ud83d\ude80 Deployment","text":"<ol> <li>Create <code>.env</code> file with required variables</li> <li>Initialize volumes <pre><code>mkdir -p ${MOUNT_PATH_DOCKER_ROOT}/{config/dnsmasq.d,pihole,logs/pihole,ngx/data,ngx/letsencrypt}\nchown -R ${UID_NAS_ADMIN:-1026}:${GID_NAS_ADMIN:-100} ${MOUNT_PATH_DOCKER_ROOT}\n</code></pre></li> <li>Start services <pre><code>docker-compose up -d\n</code></pre></li> </ol>","tags":["Networking","DNS","Proxy"]},{"location":"blog/posts/coreServices/#maintenance","title":"\ud83d\udd04 Maintenance","text":"<ul> <li>Backups<ul> <li>Regularly backup volume directories</li> </ul> </li> <li>Updates <pre><code>docker-compose pull\ndocker-compose up -d\n</code></pre></li> <li>Logs <pre><code>docker-compose logs -f\n</code></pre></li> </ul>","tags":["Networking","DNS","Proxy"]},{"location":"blog/posts/developmentServices/","title":"Development Environment Stack","text":"<p>Integrated development environment with code editor, version control, and knowledge management.</p>","tags":["IDE","Version Control","Note Taking"]},{"location":"blog/posts/developmentServices/#service-configuration","title":"\ud83d\udee0\ufe0f Service Configuration","text":"<ul> <li>This setup uses the shared Docker Compose anchors for:</li> <li>Logging (<code>default-logging</code>)</li> <li>Labels (<code>default-labels</code>)</li> <li>Resource limits (<code>resource-limits</code>)</li> </ul>","tags":["IDE","Version Control","Note Taking"]},{"location":"blog/posts/developmentServices/#development-services","title":"Development Services","text":"Code ServerObsidianGitLab CEGitLab Runner <pre><code>codeserver:\n  container_name: codeserver\n  hostname: codeserver\n  image: ghcr.io/linuxserver/code-server\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=codeserver\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n    PASSWORD: ${SUDO_PASSWORD_VSCODE} # (3)\n    PROXY_DOMAIN: codeserver.${SYNOLOGY_BASIC_URL} # (4)\n    SUDO_PASSWORD: ${SUDO_PASSWORD_VSCODE} # (5)\n  volumes:\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT:?path required}/obsidian\n      target: /config\n  ports:\n    - ${CODE_SERVER:-82}:8443\n  networks:\n    - dockerization\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: codeserver\n</code></pre> <ol> <li>\u2192 User ID for volume permissions (default: 1026)</li> <li>\u2192 Group ID for volume permissions (default: 100)</li> <li>\u2192 Web interface password (must be set in <code>.env</code>)</li> <li>\u2192 Proxy domain for the service</li> <li>\u2192 Sudo password for terminal operations</li> </ol> <pre><code>obsidian:\n  container_name: obsidian\n  hostname: obsidian\n  image: ghcr.io/linuxserver/obsidian:latest\n  restart: always\n  shm_size: \"5gb\"\n  security_opt:\n    - no-new-privileges:false\n    - seccomp:unconfined\n  healthcheck:\n    test: timeout 10s bash -c ':&gt; /dev/tcp/127.0.0.1/3000' || exit 1\n    interval: 10s\n    timeout: 5s\n    retries: 3\n    start_period: 90s\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=obsidian\n  ports:\n    - '${OBSIDIAN_PORT:-3421}:3000'\n  volumes:\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/obsidian\n      target: /config\n  environment:\n    CUSTOM_USER: ${EMAIL} # (1)\n    PASSWORD: ${OBSIDIAN_PASSWORD} # (2)\n    UID: ${UID_NAS_ADMIN:-1026} # (3)\n    GID: ${GID_NAS_ADMIN:-100} # (4)\n  networks:\n    - dockerization\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: obsidian\n</code></pre> <ol> <li>\u2192 Login email address</li> <li>\u2192 Web interface password (must be set in <code>.env</code>)</li> <li>\u2192 User ID for volume permissions (default: 1026)</li> <li>\u2192 Group ID for volume permissions (default: 100)</li> </ol> <pre><code>gitlab:\n  container_name: gitlab\n  hostname: \"gitlab.${SYNOLOGY_BASIC_URL:?Synology URL required}\"\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=gitlab\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n    GITLAB_OMNIBUS_CONFIG: | # (3)\n      external_url 'https://gitlab.${SYNOLOGY_BASIC_URL}'\n      gitlab_rails['gitlab_shell_ssh_port'] = 22\n      gitlab_rails['gitlab_shell_git_timeout'] = 800\n      gitlab_rails['gitlab_email_enabled'] = true\n      gitlab_rails['gitlab_email_from'] = '${MAIL_RECEIVER}'\n      gitlab_rails['gitlab_email_display_name'] = 'Synology Gitlab'\n      gitlab_rails['gitlab_email_reply_to'] = '${MAIL_RECEIVER}'\n      gitlab_rails['smtp_enable'] = true\n      gitlab_rails['smtp_address'] = '${SMTP_HOST:-smtp.mail.me.com}'\n      gitlab_rails['smtp_port'] = '${SMTP_PORT:-587}'\n      gitlab_rails['smtp_user_name'] = '${EMAIL}'\n      gitlab_rails['smtp_password'] = '${SMTP_PASSWORD}'\n      gitlab_rails['smtp_domain'] = 'icloud.com'\n      gitlab_rails['smtp_authentication'] = 'login'\n      gitlab_rails['smtp_enable_starttls_auto'] = true\n      gitlab_rails['gitlab_root_email'] = '${EMAIL}'\n      gitlab_rails['lfs_enabled'] = true\n      nginx['proxy_connect_timeout'] = 300\n      nginx['proxy_read_timeout'] = 3600\n      registry['enable'] = true\n      registry_external_url 'https://gitlab.${SYNOLOGY_BASIC_URL}:${GITLAB_REGISTRY:-5005}'\n  ports:\n    - \"${GITLAB_HTTPS:-5100}:443\" # (4)\n    - \"${GITLAB_REGISTRY:-5101}:5005\" # (5)\n    - \"${GITLAB_SSH:-5102}:22\" # (6)\n  volumes:\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/gitlab/config\n      target: /etc/gitlab\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/logs/gitlab\n      target: /var/log/gitlab\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/gitlab/data\n      target: /var/opt/gitlab\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: gitlab\n</code></pre> <ol> <li>\u2192 User ID for volume permissions (default: 1026)</li> <li>\u2192 Group ID for volume permissions (default: 100)</li> <li>\u2192 Base URL for GitLab instance          \u2192 SSH port for Git operations          \u2192 Git operation timeout (seconds)          \u2192 Enable email notifications      \u2192 Sender email address    \u2192 Email display name    \u2192 Reply-to email address    \u2192 Enable SMTP service    \u2192 SMTP server address    \u2192 SMTP server port    \u2192 SMTP username    \u2192 SMTP password (must be set in <code>.env</code>)    \u2192 SMTP domain    \u2192 SMTP auth method    \u2192 Enable STARTTLS    \u2192 Admin email address    \u2192 Enable Git LFS support    \u2192 Nginx connect timeout    \u2192 Nginx read timeout    \u2192 Enable container registry    \u2192 Registry external URL</li> <li>\u2192 Web UI port (default: 5100)</li> <li>\u2192 Container registry port (default: 5101)</li> <li>\u2192 Git SSH port (default: 5102)</li> </ol> <pre><code>gitlab-runner:\n  container_name: gitlab-runner\n  hostname: gitlab-runner\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=gitlab-runner\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # (1)\n    GID: ${GID_NAS_ADMIN:-100} # (2)\n  volumes:\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n    - type: bind\n      source: /var/run/docker.sock\n      target: /var/run/docker.sock\n      read_only: true\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/gitlab/runner\n      target: /etc/gitlab-runner\n  networks:\n    dockerization:\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: gitlab-runner\n</code></pre> <ol> <li>\u2192 User ID for volume permissions (default: 1026)</li> <li>\u2192 Group ID for volume permissions (default: 100)</li> </ol>","tags":["IDE","Version Control","Note Taking"]},{"location":"blog/posts/developmentServices/#required-environment-variables","title":"\ud83d\udd10 Required Environment Variables","text":"<p>Refer to Environment Variables documentation for:</p> Variable Description Required <code>SUDO_PASSWORD_VSCODE</code> Code Server password \u2705 <code>OBSIDIAN_PASSWORD</code> Obsidian web interface password \u2705 <code>SMTP_PASSWORD</code> GitLab email password \u2705 <code>MOUNT_PATH_DOCKER_ROOT</code> Storage path \u2705 <code>SYNOLOGY_BASIC_URL</code> Base domain for services \u2705 <code>UID_NAS_ADMIN</code> User ID for volume permissions \u26a0\ufe0f Recommended <code>GID_NAS_ADMIN</code> Group ID for volume permissions \u26a0\ufe0f Recommended <p>Security Notice</p> <p>All sensitive credentials should: - Be stored in <code>.env</code> files - Have restricted permissions (<code>chmod 600</code>) - Never be committed to version control - Be rotated periodically</p>","tags":["IDE","Version Control","Note Taking"]},{"location":"blog/posts/developmentServices/#deployment","title":"\ud83d\ude80 Deployment","text":"<ol> <li>Create <code>.env</code> file with required variables</li> <li>Initialize volumes <pre><code>mkdir -p ${MOUNT_PATH_DOCKER_ROOT}/{obsidian,gitlab/config,gitlab/data,gitlab/runner,logs/gitlab}\nchown -R ${UID_NAS_ADMIN:-1026}:${GID_NAS_ADMIN:-100} ${MOUNT_PATH_DOCKER_ROOT}\n</code></pre></li> <li>Start services <pre><code>docker-compose up -d\n</code></pre></li> <li>Access services</li> <li>Code Server: <code>https://codeserver.yourdomain.com:${CODE_SERVER:-82}</code></li> <li>Obsidian: <code>https://yourdomain.com:${OBSIDIAN_PORT:-3421}</code></li> <li>GitLab: <code>https://gitlab.yourdomain.com:${GITLAB_HTTPS:-5100}</code></li> </ol>","tags":["IDE","Version Control","Note Taking"]},{"location":"blog/posts/developmentServices/#maintenance","title":"\ud83d\udd04 Maintenance","text":"<ul> <li>Backups<ul> <li>Regularly backup all volume directories</li> </ul> </li> <li>Updates <pre><code>docker-compose pull &amp;&amp; docker-compose up -d --force-recreate\n</code></pre></li> <li>Logs <pre><code>docker-compose logs -f\n</code></pre></li> </ul>","tags":["IDE","Version Control","Note Taking"]},{"location":"blog/posts/nextcloud/","title":"Nextcloud Setup","text":"<p>Self-hosted productivity platform with file sync &amp; share, calendars, contacts and more.</p>","tags":["File Sharing","Collaboration"]},{"location":"blog/posts/nextcloud/#service-configuration","title":"\ud83d\udee0\ufe0f Service Configuration","text":"<ul> <li>This setup uses the shared Docker Compose anchors for</li> <li>Logging (<code>default-logging</code>)</li> <li>Labels (<code>default-labels</code>)</li> <li>Resource limits (<code>resource-limits</code>)</li> </ul>","tags":["File Sharing","Collaboration"]},{"location":"blog/posts/nextcloud/#core-services","title":"Core Services","text":"PostgreSQLRedisNextcloud <pre><code>nextcloud-postgres:\n  image: postgres:latest\n  container_name: nextcloud-postgres\n  hostname: nextcloud-postgres\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=nextcloud-postgres\n  healthcheck:\n    test: [\"CMD-SHELL\", \"pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}\"]\n    interval: 10s\n    timeout: 5s\n    retries: 5\n  environment:\n    POSTGRES_USER: ${POSTGRES_USER:-nextcloud} # (1)\n    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloud} # (2)\n    POSTGRES_DB: ${POSTGRES_DB:-nextcloud} # (3)\n    UID: ${UID_NAS_ADMIN:-1026} # optional (4)\n    GID: ${GID_NAS_ADMIN:-100} # optional (5)\n  volumes:\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT:?path required}/nextcloud/db\n      target: /var/lib/postgresql/data\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: nextcloud-postgress\n  networks:\n    dockerization:\n</code></pre> <ol> <li>\u2192 Database username (default: <code>nextcloud</code>)</li> <li>\u2192 Database password (default: <code>nextcloud</code>)</li> <li>\u2192 Database name (default: <code>nextcloud</code>)</li> <li>\u2192 Optional user ID for volume permissions (default: 1026)</li> <li>\u2192 Optional group ID for volume permissions (default: 100)</li> </ol> <pre><code>nextcloud-redis:\n  image: redis:alpine\n  container_name: nextcloud-redis\n  hostname: nextcloud-redis\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=nextcloud-redis\n  healthcheck:\n    test: [\"CMD\", \"redis-cli\", \"ping\"]\n    interval: 10s\n    timeout: 5s\n    retries: 5\n  networks:\n    dockerization:\n  environment:\n    UID: ${UID_NAS_ADMIN:-1026} # optional (1)\n    GID: ${GID_NAS_ADMIN:-100} # optional (2)\n  volumes:\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: nextcloud-redis\n</code></pre> <ol> <li>\u2192 Optional user ID for volume permissions (default: 1026)</li> <li>\u2192 Optional group ID for volume permissions (default: 100)</li> </ol> <pre><code>nextcloud:\n  image: nextcloud:latest\n  container_name: nextcloud\n  hostname: nextcloud\n  restart: always\n  &lt;&lt;: *resource-limits\n  logging:\n    &lt;&lt;: *default-logging\n    options:\n      &lt;&lt;: *default-logging-options\n      loki-external-labels: job=nextcloud\n  healthcheck:\n    test: [\"CMD-SHELL\", \"curl --fail http://localhost:80 || exit 1\"]\n    interval: 60s\n    retries: 5\n    start_period: 20s\n    timeout: 10s\n  ports:\n    - \"${NEXT_CLOUD_PORT:-81}:80\"\n  volumes:\n    - type: bind\n      source: /etc/localtime\n      target: /etc/localtime\n      read_only: true\n    - type: bind\n      source: ${MOUNT_PATH_DOCKER_ROOT}/nextcloud/app\n      target: /var/www/html\n  environment:\n    POSTGRES_USER: ${POSTGRES_USER:-nextcloud} # (1)\n    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextcloud} # (2)\n    POSTGRES_DB: ${POSTGRES_DB:-nextcloud} # (3)\n    POSTGRES_HOST: ${POSTGRES_HOST:-nextcloud-postgres} # (4)\n    NEXTCLOUD_DATADIR: /mnt/ncdata # (5)\n    NEXTCLOUD_UPLOAD_LIMIT: 10G # (6)\n    NEXTCLOUD_MEMORY_LIMIT: 512M # (7)\n    TRUSTED_DOMAINS: nextcloud.${SYNOLOGY_BASIC_URL:?Synology URL required} # (8)\n    SMTP_HOST: ${SMTP_HOST:-smtp.mail.me.com} # (9)\n    SMTP_SECURE_MODE: tls # (10)\n    SMTP_PORT: ${SMTP_PORT:-587} # (11)\n    SMTP_NAME: ${EMAIL} # (12)\n    SMTP_PASSWORD: ${SMTP_PASSWORD} # (13)\n    UID: ${UID_NAS_ADMIN:-1026} # optional (14)\n    GID: ${GID_NAS_ADMIN:-100} # optional (15)\n  depends_on:\n    nextcloud-postgres:\n      condition: service_healthy\n    nextcloud-redis:\n      condition: service_healthy\n  labels:\n    &lt;&lt;: *default-labels\n    monitoring: nextcloud\n  networks:\n    dockerization:\n</code></pre> <ol> <li>\u2192 PostgreSQL username (matches database service)</li> <li>\u2192 PostgreSQL password (matches database service)</li> <li>\u2192 Database name (matches database service)</li> <li>\u2192 Database hostname (using Docker service name)</li> <li>\u2192 Data storage path inside container</li> <li>\u2192 Max upload size (10GB)</li> <li>\u2192 PHP memory limit (512MB)</li> <li>\u2192 Trusted domain (required)</li> <li>\u2192 SMTP server for email</li> <li>\u2192 SMTP encryption (TLS)</li> <li>\u2192 SMTP port (587)</li> <li>\u2192 Email address for SMTP auth</li> <li>\u2192 SMTP password (must be set in <code>.env</code>)</li> <li>\u2192 User ID for volume permissions (default: 1026)</li> <li>\u2192 Group ID for volume permissions (default: 100)</li> </ol>","tags":["File Sharing","Collaboration"]},{"location":"blog/posts/nextcloud/#required-environment-variables","title":"\ud83d\udd10 Required Environment Variables","text":"<p>Refer to Environment Variables documentation for:</p> Variable Description Required <code>MOUNT_PATH_DOCKER_ROOT</code> Storage path \u2705 <code>SYNOLOGY_BASIC_URL</code> Domain for trusted hosts \u2705 <code>EMAIL</code> Admin email for SMTP \u2705 <code>SMTP_PASSWORD</code> SMTP auth password \u2705 <code>UID_NAS_ADMIN</code> User ID for volume permissions \u26a0\ufe0f Recommended <code>GID_NAS_ADMIN</code> Group ID for volume permissions \u26a0\ufe0f Recommended <p>Security Notice</p> <ul> <li>Be stored in <code>.env</code> files</li> <li>Have restricted permissions (<code>chmod 600</code>)</li> <li>Never be committed to version control</li> <li>Be rotated periodically</li> </ul>","tags":["File Sharing","Collaboration"]},{"location":"blog/posts/nextcloud/#deployment","title":"\ud83d\ude80 Deployment","text":"<ol> <li>Create <code>.env</code> file with required variables</li> <li>Initialize volumes <pre><code>mkdir -p ${MOUNT_PATH_DOCKER_ROOT}/nextcloud/{db,app}\nchown -R ${UID_NAS_ADMIN:-1026}:${GID_NAS_ADMIN:-100} ${MOUNT_PATH_DOCKER_ROOT}/nextcloud\n</code></pre></li> <li>Start services <pre><code>docker-compose up -d\n</code></pre></li> <li>Access web UI at <code>http://yourdomain.com:81</code></li> </ol>","tags":["File Sharing","Collaboration"]},{"location":"blog/posts/nextcloud/#maintenance","title":"\ud83d\udd04 Maintenance","text":"<ul> <li>Backups<ul> <li>Regularly backup both the PostgreSQL and app volumes</li> </ul> </li> <li>Updates <pre><code>docker-compose pull &amp;&amp; docker-compose up -d\n</code></pre></li> <li>Logs <pre><code>docker-compose logs -f\n</code></pre></li> </ul>","tags":["File Sharing","Collaboration"]},{"location":"contact/","title":"Contact","text":"Name: E-Mail: Message:          Submit"},{"location":"global/environment/","title":"\u2699\ufe0f Environment Variables","text":"<p>These environment variables configure all Homelab services. Store sensitive values in your <code>.env</code> file and reference them in Docker Compose.</p> \ud83d\udd27 Core Configuration\ud83d\udd10 Authentication Secrets\ud83d\udce8 Email Configuration\ud83c\udf10 Networking\ud83d\udee1\ufe0f Security Variable Description Example \ud83d\udce1 <code>SYNOLOGY_BASIC_URL</code> Base URL for Synology services <code>https://synology.yourdomain.com</code> \ud83d\udcc2 <code>MOUNT_PATH_DOCKER_ROOT</code> Docker volumes root path <code>/mnt/docker</code> \ud83d\udce7 <code>EMAIL</code> Primary contact email <code>your@email.com</code> Variable Description Security \ud83d\udd11 <code>PG_PASS</code> PostgreSQL database password \ud83d\udd12 Sensitive \ud83d\udd10 <code>AUTHENTIK_SECRET_KEY</code> Autentik cryptographic key \ud83d\udd12 Sensitive \ud83d\udee0\ufe0f <code>SUDO_PASSWORD_VSCODE</code> VS Code container sudo password \ud83d\udd12 Sensitive Variable Description Required \ud83d\udce9 <code>MAIL_RECEIVER</code> Alert notifications recipient <code>alerts@yourdomain.com</code> \ud83d\udce4 <code>SMTP_PASSWORD</code> Outbound mail server password \ud83d\udd12 Yes Variable Description Service \ud83c\udf10 <code>CLOUDFLARE_TOKEN</code> Cloudflare API token \ud83d\udd12 Tunnel/DNS \ud83d\udeab <code>PI_HOLE_PASSWORD</code> Pi-hole admin interface \ud83d\udd12 DNS Variable Description Scope \ud83d\udd11 <code>INITIAL_ADMIN_PASSWORD</code> Default admin password Multiple services \ud83d\udd75\ufe0f\u200d\u2642\ufe0f <code>WATCHTOWER_HTTP_API_TOKEN</code> Container update auth \ud83d\udd12 Watchtower <p>Best Practices</p> <ul> <li>Always use <code>.env</code> files for sensitive variables</li> <li>Rotate credentials quarterly</li> <li>Restrict permissions to <code>600</code></li> <li>Never commit to version control</li> </ul> <p>Sample .env File</p> <pre><code># Core\nSYNOLOGY_BASIC_URL=synology.yourdomain.com\nMOUNT_PATH_DOCKER_ROOT=/mnt/docker\n\n# Secrets\nPG_PASS=strongpassword123\nAUTENTIK_SECRET_KEY=changeme\n</code></pre>","tags":["Globaly"]},{"location":"global/sharedConfig/","title":"Shared Config","text":"","tags":["Globaly"]},{"location":"global/sharedConfig/#shared-docker-compose-anchors","title":"Shared Docker Compose Anchors","text":"<p>The following shared anchors are used across services in your docker-compose.yml file to ensure consistent configuration for logging, labeling, and resource limits.</p> LoggingLabelsResource Limits <p>Standardized Logging for Docker services</p> <p>The following shared anchors are used across services in your docker-compose.yml file to ensure consistent configuration for logging, labeling, and resource limits.</p> <pre><code>x-logging: &amp;default-logging\n  driver: \"loki\" # (1)\n  options: &amp;default-logging-options\n    loki-url: https://loki.${SYNOLOGY_BASIC_URL}/loki/api/v1/push # (2)\n    loki-retries: 5 # (3)\n    loki-batch-size: 400 # (4)\n    loki-batch-wait: 2s # (5)\n    loki-timeout: 10s # (6)\n    loki-max-backoff: 5s # (7)\n    loki-min-backoff: 1s # (8)\n    loki-tenant-id: default # (9)\n</code></pre> <ol> <li>\u2192 Uses Grafana Loki for log aggregation</li> <li>\u2192 Dynamic URL using environment variable</li> <li>\u2192 Maximum 5 retries on failure</li> <li>\u2192 400 log lines per batch maximum</li> <li>\u2192 2 second wait for partial batches</li> <li>\u2192 10 second request timeout</li> <li>\u2192 5 seconds maximum between retries</li> <li>\u2192 1 second minimum between retries</li> <li>\u2192 Default tenant identifier</li> </ol> <p>Remember</p> <ul> <li>The <code>SYNOLOGY_BASIC_URL</code> must be set in your environment or replaced with your direct Loki URL</li> <li>These settings can be adjusted as needed, but the shown values are recommended by Loki docs for:</li> <li>Balanced performance (batch size 400)</li> <li>Reliable delivery (retries 5)</li> <li>Network resilience (timeout 10s)</li> <li>For production environments, consider:</li> <li>Increasing batch size if high log volume</li> <li>Adjusting timeouts based on network latency</li> </ul> <p>Standardized labels for Docker services</p> <p>The following shared anchors ensure consistent behavior across your <code>docker-compose.yml</code>:</p> <pre><code>x-labels: &amp;default-labels\n  com.centurylinklabs.watchtower.enable: true  # (1)\n  recreat.container: true                      # (2)\n  container.label.group: setup                 # (3)\n</code></pre> <ol> <li>\u2192 Enables Watchtower to auto-update this container</li> <li>\u2192 Custom marker for deployment-triggered recreation</li> <li>\u2192 Categorizes containers (e.g., <code>proxy</code>, <code>db</code>, <code>monitoring</code>)</li> </ol> <p>Remember</p> <ul> <li>Update <code>container.label.group</code> per service</li> <li>Groups enable bulk operations via: <pre><code>docker ps --filter \"label=container.label.group=setup\"\n</code></pre></li> </ul> <p>Standardized Resource Limits for Docker services</p> <p>The following shared anchors ensure consistent behavior across your <code>docker-compose.yml</code>:</p> <pre><code>x-resource-limits: &amp;default-resource-limits\n  deploy:\n    resources:\n      limits:\n        cpus: '0.50'  # (1)\n        memory: 512M  # (2)\n      reservations:\n        cpus: '0.25'  # (3)\n        memory: 256M  # (4)\n</code></pre> <ol> <li>\u2192 Container won't exceed 50% of a CPU core</li> <li>\u2192 Hard memory cap of 512MB (OOM kill if exceeded)</li> <li>\u2192 Guaranteed 25% of a CPU core</li> <li>\u2192 Always allocated 256MB memory buffer</li> </ol> <p>Remember</p> <ul> <li>Adjust values based on your host machine capacity</li> <li>Monitor usage with <pre><code>docker stats --format \"table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\"\n</code></pre></li> </ul>","tags":["Globaly"]},{"location":"global/sharedConfig/#example-usage","title":"Example Usage","text":"<p>Here's how to implement these shared anchors in a service definition:</p> <pre><code>version: '3.8'\n\nservices:\n  nginx:\n    image: nginx:latest\n    &lt;&lt;: *default-labels\n    &lt;&lt;: *default-resource-limits\n    logging: *default-logging\n    ports:\n      - \"80:80\"\n    environment:\n      - SYNOLOGY_BASIC_URL=yourdomain.com  # Required for Loki URL\n\n  postgres:\n    image: postgres:15\n    &lt;&lt;: *default-labels\n    &lt;&lt;: *default-resource-limits\n    logging: *default-logging\n    environment:\n      POSTGRES_PASSWORD: example\n      - SYNOLOGY_BASIC_URL=yourdomain.com\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n\nx-logging: &amp;default-logging\n  driver: \"loki\"\n  options: &amp;default-logging-options\n    loki-url: https://loki.${SYNOLOGY_BASIC_URL}/loki/api/v1/push\n    loki-retries: 5\n    loki-batch-size: 400\n    loki-batch-wait: 2s\n    loki-timeout: 10s\n    loki-max-backoff: 5s\n    loki-min-backoff: 1s\n    loki-tenant-id: default\n\nx-labels: &amp;default-labels\n  com.centurylinklabs.watchtower.enable: true\n  recreat.container: true\n  container.label.group: setup\n\nx-resource-limits: &amp;default-resource-limits\n  deploy:\n    resources:\n      limits:\n        cpus: '0.50'\n        memory: 512M\n      reservations:\n        cpus: '0.25'\n        memory: 256M\n\nvolumes:\n  pgdata:\n</code></pre>","tags":["Globaly"]}]}